/******************************************************************************
 *
 * Copyright (c) 1996-1999 Palm Computing, Inc. or its subsidiaries.
 * All rights reserved.
 *
 * File: ExpDB.h
 *
 * Description:
 *	  This file defines the Expense application's database structures 
 *   and routines.
 *
 * History:
 *		January 3, 1996	Created by Art Lamb
 *		grant	3/25/99	Added a third group of currencies.  The three groups are now
 *							countries from the main country list (IDs 0-127), user custom
 *							currencies (IDs 128-132), and expense app custom currencies
 *							(IDs 133-253).
 *							Renamed some constants to make clear the distinction between
 *							user custom currencies and expense app currencies.
 *
 *****************************************************************************/

#include <DateTime.h>

#define expenseMaxPriority				5

#define expenseNoDueDate				0xffff


// Sort orders
#define sortByDate						0
#define sortByType						1


// Dirty flags for to do application info
#define expenseSortByPriorityDirty	0x0001


#define maxUserCustomCurrencies		4
#define maxCurrencyNameLen				16
#define maxCurrencySymbolLen			4
#define maxExchangeRateLen				8

#define numExpenseTypes					28

// Custom currency IDs
//		128-132	user's custom currencies
//		133-133	expense app custom currencies
#define currencyCustomUser1			128
#define currencyCustomUser2			129
#define currencyCustomUser3			130
#define currencyCustomUser4			131
#define currencyCustomUser5			132

#define currencyCustomAppEuro				133

#define currencyCustomAppFirst			currencyCustomAppEuro
#define currencyCustomAppLast				currencyCustomAppEuro
#define currencyCustomAppCount			(currencyCustomAppLast - currencyCustomAppFirst + 1)

#define currencyDistance				254		// indicates the distance, not currency is being displayed
#define currencyNone						255


// Custom Currency Info
typedef struct {
	Char 		country [maxCurrencyNameLen];
	Char		symbol [maxCurrencySymbolLen];
	Char		exchangeRate [maxExchangeRateLen];
} CurrencyInfoType;

typedef CurrencyInfoType * CurrencyInfoPtr;


// Application Info Block
typedef struct {
   UInt16					renamedCategories;	// bitfield of categories with a different name
	char 					categoryLabels [dmRecNumCategories] [dmCategoryLength];
	UInt8 					categoryUniqIDs [dmRecNumCategories];
	UInt8					lastUniqID;				// Uniq IDs generated by the device are between
														// 0 - 127.  Those from the PC are 128 - 255.
	UInt8					reserved1;				// from the compiler word aligning things
	UInt16					reserved2;	
	UInt8					sortOrder;
	UInt8					reserved3;
	CurrencyInfoType	currencies [maxUserCustomCurrencies];
} ExpenseAppInfoType;

typedef ExpenseAppInfoType * ExpenseAppInfoPtr;


// Expense Payment Types
typedef enum { payAmEx,
					payCash, 
					payCheck,
					payCreditCard,
					payMasterCard,
					payPrepaid,
					payVISA,
					payUnfiled
} ExpensePaymentType;


// Expense Types
typedef enum { expAirfare,
					expBreakfast,
					expBus,
					expBusinessMeals,
					expCarRental,
					expDinner,
					expEntertainment,
					expFax,
					expGas,
					expGifts,
					expHotel,
					expIncidentals,
					expLaundry,
					expLimo,
					expLodging,
					expLunch,
					expMileage,
					expOther,
					expParking,
					expPostage,
					expSnack,
					expSubway,
					expSupplies,
					expTaxi,
					expTelephone,
					expTips,
					expTolls,
					expTrain
 } ExpenseTypeType;


// ExpenseDBPackedRecord.
//
//		Date					2 byte	year 7 bits, month 4 bits, day 5 bits
//		ExpenseType			1 byte  (ExpenseTypeType)
//		PaymentType			1 byte  (ExpensePaymentType)
//		Currency				1 byte	
//		Amount				null-terminated string
//		Vendor				null-terminated string
//		City					null-terminated string
//		Attendees			null-terminated string
//		Note					null-terminated string

typedef struct {
	DateType				date;
	UInt8					type;
	UInt8 					paymentType;
	UInt8					currency;
	UInt8					reserved;
} ExpensePackedRecord;

typedef ExpensePackedRecord * ExpensePackedRecordPtr;


// ExpenseRecordType
//
// This is the format of a to do record used by the application.  All 
// pointers are either NULL or point to data within the PackedDB record.
// All strings are null character terminated.
//
typedef struct {
	DateType 			date;
	UInt8			 		type;
	UInt8			 		paymentType;
	UInt8					currency;
	UInt8					reserved;
	Char *				amount;
	Char *				vendor;
	Char *				city;
	Char *				attendees;
	Char *				note;
} ExpenseRecordType;

typedef ExpenseRecordType * ExpenseRecordPtr;



// Used for ExpenseChangeRecord.
enum ExpenseRecordFields { 
	expenseDate,
	expenseType,
	expensePaymentType,
	expenseCurrency,
	expenseAmount,
	expenseVendor,
	expenseCity,
	expenseAttendees,
	expenseNote };

typedef enum ExpenseRecordFields ExpenseRecordFieldType;



//-------------------------------------------------------------------
// Routines
//-------------------------------------------------------------------
#ifdef __cplusplus
extern "C" {
#endif



Err 		ExpenseAppInfoInit (DmOpenRef dbP);

MemHandle ExpenseGetAppInfo (DmOpenRef dbP);

Err 		ExpenseNewRecord (DmOpenRef dbP, ExpenseRecordPtr item, UInt16 *index);

Err 		ExpenseGetRecord (DmOpenRef dbP, UInt16 index, ExpenseRecordPtr r, 
					MemHandle * handleP);

Err 		ExpenseChangeRecord (DmOpenRef dbP, UInt16 * index, 
					ExpenseRecordFieldType changedField, void * data);

void 		ExpenseSort (DmOpenRef dbP);

Err 		ExpenseChangeSortOrder(DmOpenRef dbP, UInt8 sortOrder);

UInt8		ExpenseGetSortOrder (DmOpenRef dbP);


#ifdef __cplusplus
}
#endif

