<HTML><!-- #BeginTemplate "/Templates/Quartus.dwt" -->
<HEAD>
<!-- #BeginEditable "doctitle" --> 
<TITLE>Quartus Forth: Creating a Stand-Alone Executable</TITLE>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=">
</HEAD>

<BODY BGCOLOR="#FFFFFF" background="graph.gif">
<h1><font face="Verdana, Arial, Helvetica, sans-serif"><img src="dfpc.gif" width="64" height="93" align="right" border="0">Quartus 
  Forth Manual</font></h1>
<a href="manual.htm"><font size="-1" face="Arial, Helvetica, sans-serif">Table 
of Contents</font></a><font size="-1" face="Arial, Helvetica, sans-serif"> - <a href="http://www.quartus.net/products/forth/">Quartus 
Forth Home Page</a></font><font size="-1"> - <a href="register.htm"><font face="Arial, Helvetica, sans-serif">How 
to Register</font></a><br>
</font> 
<hr>
<!-- #BeginEditable "text" --> 
<h2><font face="Arial, Helvetica, sans-serif">Creating Stand-Alone Executables</font></h2>
<p>This section of the manual applies to the <a href="register.htm">registered</a> 
  version of Quartus Forth only.</p>
<h3><font face="Arial, Helvetica, sans-serif">MakePRC: Stand-alone Executable 
  Creation </font></h3>
<p>Quartus Forth provides facilities for turning your applications into stand-alone 
  executables that can be downloaded and distributed royalty-free. As it builds 
  an executable, it includes only those parts of the kernel that are required 
  for your application.</p>
<p>Executables generated by Quartus Forth can be HotSync'd into your Palm device 
  and started from the application launcher, just as with any other Palm executable. 
  No run-time module is required! </p>
<p>The basic command for creating a stand-alone executable (<a href="glossary.htm">PRC</a>) 
  is <b>MakePRC</b>.</p>
<blockquote> 
  <p><b>MakePRC</b> ( <i>xt creatorID. &lt;name&gt;</i> -- )</p>
</blockquote>
<p><b>MakePRC</b> reads code from the specified <i>xt</i>, and recursively extracts 
  all required supporting code into a new PRC with the name provided. Each PRC 
  that is destined for release to the general public must have a unique creator 
  ID, allocated from the <a href="http://palm.3com.com/devzone/crid/cridsub.html">Creator 
  ID database</a> that 3Com maintains for all developers.</p>
<p>Use the <a href="library.htm">library file</a> <i>ids</i> to make the use of 
  creator IDs in Quartus Forth simple.</p>
<p>There's a simple usage example in the <a href="quick.htm">Quick Start</a> --</p>
<p><code>' go 12345. <b>MakePRC</b> Hello</code></p>
<p>In this example, <code>go</code> is the top-level word, <code>12345.</code> 
  is the creator ID, and the resulting PRC name is <code>Hello</code>.</p>
<p>A more typical example comes from the sample application <i>year</i>:</p>
<p><code> needs resources<br>
  needs ids<br>
  </code>...<code><br>
  (ID) p4ap (ID) Year use-resources<br>
  </code>...<code><br>
  ' go (ID) Year <b>MakePRC</b> Year<br>
  \ Note that Year is a creator-ID<br>
  \ registered with<br>
  \ http://palm.3com.com/devzone<br>
  \ Each released app must have a<br>
  \ unique, registered creator ID.</code></p>
<p>When you next HotSync your PalmPilot, the generated PRC is automatically downloaded 
  to your PC or Mac, and can be distributed and uploaded to any Palm device. It's 
  completely stand-alone, and requires no run-time module.</p>
<h3><font face="Arial, Helvetica, sans-serif">Using External Resources</font></h3>
<blockquote>
  <p><b>CopyRsrc</b> ( <i>resource# resourceID.</i> -- )<br>
    <b>DelRsrc</b> ( <i>resource# resourceID.</i> -- <i>success</i> )</p>
</blockquote>
<p>You can create external PalmOS GUI resources using standard tools such as <a href="online.htm">PilRC</a>, 
  or the on-board resource compiler, <a href="online.htm">RsrcEdit</a>. These 
  resources can be used by your Quartus Forth applications, and compiled directly 
  into stand-alone executables you create.</p>
<p>After <b>MakePRC</b>, you can use <b>CopyRsrc</b> and <b>DelRsrc</b> to copy 
  resources into or delete resources from the generated target PRC file.</p>
<p><b>CopyRsrc</b> will search for a specified resource by number and ID, and 
  create a copy of that resource in the target PRC.</p>
<p>From the <a href="sample.htm">sample application</a> <i>Year</i>:</p>
<p><code>3000 constant AboutBox<br>
  3001 constant HelpString<br>
  </code>...<code><br>
  1001 constant YearForm<br>
  </code>...<code> <br>
  \ Add required resources:<br>
  2000 (ID) MBAR <b>CopyRsrc</b> \ menu<br>
  YearForm (ID) tFRM <b>CopyRsrc</b><br>
  AboutBox (ID) Talt <b>CopyRsrc</b><br>
  HelpString (ID) tSTR <b>CopyRsrc</b><br>
  <br>
  \ Copy icons:<br>
  1000 (ID) tAIB <b>CopyRsrc</b> \ normal<br>
  1001 (ID) tAIB <b>CopyRsrc</b> \ small <br>
  </code> </p>
<p><b>DelRsrc</b> will delete a specified resource from the target PRC.</p>
<p>From <i><a href="sample.htm">Year</a></i>:</p>
<p><code>\ Delete unneeded forms:<br>
  MainFormID (ID) tFRM <b>DelRsrc</b> drop<br>
  TitledFormID (ID) tFRM <b>DelRsrc</b> drop<br>
  </code> </p>
<p>See the <a href="sample.htm">Sample Applications</a> for more details and examples 
  of the use of these words.</p>
<h3><font face="Arial, Helvetica, sans-serif">Caveats for Stand-Alone Applications</font></h3>
<p>Bear in mind that generated stand-alone executables contain only the code required 
  by your application. In a generated executable, there is no dictionary; dictionary 
  headers on words are removed, and the interpreter is not present.</p>
<p>Also, take care not to rely on the value returned by <kbd>'</kbd> (tick) in 
  a stand-alone executable. An <i>xt</i> returned by ' during compilation will 
  not match the xt of a word in a generated executable. Should you need to initialize 
  a vector with an <i>xt</i>, use <kbd>[']</kbd> from within a word to do so; 
  <i>xt</i>'s returned by <kbd>[']</kbd> are position-independent.</p>
<p>For example:</p>
<p>This technique would not produce working code in a stand-alone executable:</p>
<p> <samp>: myword .&quot; Hello&quot; cr ;<br>
  <br>
  variable vector<br>
  ' myword vector !<br>
  <br>
  : go vector @ execute ;</samp></p>
<p>This is the correct method:</p>
<p><samp>: myword .&quot; Hello&quot; cr ;<br>
  <br>
  variable vector<br>
  <br>
  : go<br>
  ['] myword vector !<br>
  vector @ execute ;</samp></p>
<!-- #EndEditable --> 
<hr>
<a href="manual.htm"><font size="-1" face="Arial, Helvetica, sans-serif">Table 
of Contents</font></a><font size="-1" face="Arial, Helvetica, sans-serif"> - <a href="http://www.quartus.net/products/forth/">Quartus 
Forth Home Page</a></font><font size="-1"></font> 
<hr>
<font face="Verdana, Arial, Helvetica, sans-serif"><font face="Arial, Helvetica, sans-serif" size="-1">© 
1998, 1999 <a href="http://www.quartus.net/">Neal Bridges</a>. All 
rights reserved</font><font face="Times New Roman, Times, serif" size="-1">.</font></font> 
</BODY>
<!-- #EndTemplate --></HTML>
