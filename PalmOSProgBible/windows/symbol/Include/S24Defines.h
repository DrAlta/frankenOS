#pragma once#define MIN_ETHERNET_PACKET_SIZE	60#define MAX_ETHERNET_PACKET_SIZE	1514#define	S24_DIVERSITY_DISABLED		0#define S24_DIVERSITY_ENABLED		1//	MAC/IEEE address length#define S24_MAC_ADDR_LENGTH		6		// 48 bit IEEE address //	BSS ID's are always 6 bytes#define S24_BSS_ID_LENGTH  		6		// 48 bit IEEE address//	Maximum ESS ID length#define S24_ESS_ID_LENGTH  		32		// max size of ESSID// MKK Callsign length#define S24_MKK_CALLSIGN_LEN	15// Country Code lengths#define S24_COUNTRY_ID_LEN		2#define S24_COUNTRY_TEXT_LEN	34/* *	File - s24drvr.h * *	Spectrum 24 PCMCIA card host interface definitions * *	Copyright (C) 1996-1998, Symbol Technologies, Inc. * *  MODIFIED for SPT-1740 PalmIII project  */// Some debug build stuff#ifdef BUILD_MONO_APP#define NUM_DEBUG_COUNTERS	6extern UInt gDebugCounters[NUM_DEBUG_COUNTERS];#define CT_STAT_CHANGE		0#define CT_READ_READY 		1#define CT_TX_DONE			2#define INCREMENT_COUNTER(n)	gDebugCounters[(n)]++#endif//  Defined here for convenience only - if including from system headers,//  you need to turn precompilation off and that's too slow.#define hwr68328Base        0xFFFFF000L    // Base address of 68328typedef Byte	U08;typedef Word	U16;typedef Long 	U32;#define xchb( x )		( (unsigned)x >> 8 | (unsigned)x << 8 )#ifndef min#define min(a,b)	(a < b ? a : b)#define max(a,b)	(a > b ? a : b)#endif/* *	The following are offsets in adapter memory for the basic *	Host Interface communications area */#define ESS_WR			0x0E0			/* ESS_ID string buffer */#define CR_WR			0x100			/* Command Register definitions */#define ASR_RD			0x110			/* Adapter Status Register definitions */#define WOC_RD			0x112			/* Write Operation Complete Register */#define WOC_WR			0x112#define RSR_RD			0x120			/* Receive Status Register definitions */#define TSR_RD			0x130			/* Transmit Status Register definitions */#define TDR_RD			0x140			/* Transmit Data Register */#define TDR_RD_FREE_BUFFER_PTR	(TDR_RD+0)#define RDR_RD			0x150			/* Receive Data Register */#define RDR_RD_TOTAL_RX_LENGTH	(RDR_RD+0)	/* length */#define RDR_RD_BUFFER_PTR		(RDR_RD+2)	/* pointer */#define PAR_WR			0x160			/* Physical Address Register */#define PAR_RD			0x160			/* 6 byte IEEE address */#define DSR_RD			0x170			/* Diagnostic Setup Register */// NOTE: Stu changed this.  The value in CE-Drive's SLACS.h was 0x174, not 0x176.// #define APT_RD			0x176			/* AP Table length, offset */#define APT_RD			0x174			/* AP Table length */#define APT_PTR			0x176			/* AP Table offset */#define BIT_RD			0x178			/* BIT table offset */#define AS_STLEN		0x180			/* length of Adapter Statistics table */#define AS_STPTR		0x182			/* pointer to Adapter Statistics */#define ATIME_RD		0x184			/* 4 bytes of time, flag */#define ATX_RD			0x18B			/* tx in process */#define MKK_RD			0x190			/* flag, 15 bytes of MKK call sign */#define COUNTRY_ID		0x1A0			/* 2 byte country name ID code */#define COUNTRY_TEXT	0x1A2			/* 34 byte country name string, null terminated */#define WARM_START		0x380/* Version/Date string definitions (Part of Adapter Statistics) */#define VRD_RD			0x500		/* version and date string */#define ASI_RD			0x50C		/* various variables */#define ASSOC_RD 		0x50C		/* first one is association events */#define STS_RD			0x50D		/* self-test status */#define ASSOC_AP_RD	0x537			/* AP table address of associated AP */#define ASSOC_AP_IEEE	0x0B		/* offset to IEEE address in AP table *//* *	ASIC Registers accessible by the host */#define STATUS	0				/* Moon status register */#define CMD		1				/* Moon command register */#define BSSR	2				/* Moon bank switch register */#define HREG	3				/* Moon Host register */#define ADRSR	4				/* Moon Address register (2 bytes) */#define DATAR	6				/* Moon data register(s) *//* *	HREG Commands  */#define CMDHREG_INIT_MU		1		/* Select MU mode */#define CMDHREG_INIT_AP		2		/* Select AP mode */#define CMDHREG_WAKEUP		3		/* Wakeup the MU command */#define CMDHREG_RESUME		4		/* Resume (host done) command */#define CMDHREG_SLEEP		5		/* Sleep mode command *//* *	Status Register bits */#define ST_P188INT		0x01		/* Interrupt from adapter; write 1 to clear */#define ST_PREG			0x02		/* PREG is full */#define ST_HREG			0x04		/* HREG is empty */#define ST_INTRIGEL		0x08		/* Interrupt from Rigel */#define ST_HOSTINT		0x10		/* Interrupt from host pending */#define ST_P188_ACTIVE	0x20		/* 188 is alert */#define ST_PD			0x40		/* Powered down */#define ST_COR_RESET	0x80		/* Status of COR Reset *//* *	Command Register bits */#define CMDREG_ENB_188			0x01		/* Enable 188 interrupt to host */#define CMDREG_ENB_PREG			0x02		/* Interrupt on PREG full */#define CMDREG_ENB_HREG			0x04		/* Interrupt on HREG empty */#define CMDREG_ENB_RIGEL		0x08		/* Interrupt on Rigel */#define CMDREG_INTRUPT			0x10		/* Interrupt the 188 */#define CMDREG_QUIT_POWER_DOWN	0x20		/* Quit Power Down */#define CMDREG_HOST_RDY			0x40		/* Host Ready control */#define CMDREG_RESET			0x80		/* Soft Reset */// #define CMD_INT					CMD_QUIT_POWER_DOWN#define COR	0x800			/* Card Options Register (attrib mem) */#define IOMODE	0x41		/* select IO mode *//* * Command Register definitions * *	Write these commands to adapter memory at 0x100, along with *	any required parameters, and interrupt the adapter.  Ensure *	that WOC at 110 is set before storing another command. */#define CMD_XRESET		0x00		/* Reset command */#define CMD_SRC	 		0x01		/* Set receive configuration */#define CMD_STC	 		0x02		/* Set transmitter configuration */#define CMD_AMA	 		0x03		/* Add multicast addr */#define CMD_DMA	 		0x04		/* Delete multicast addr */#define CMD_SAM	 		0x05		/* Set or clear all multicast bits */#define CMD_TXL	 		0x08		/* Transmit list */#define CMD_SKR	 		0x09		/* Skip receive */#define CMD_SDT			0x0B		/* Set NetID (Domain) for Spring only */#define CMD_ASR_CLR		0x0C		/* Clear adapter status register bits */#define CMD_RSR_CLR		0x0D		/* Clear receive status register bits */#define CMD_TSR_CLR		0x0E		/* Clear transmit status register bits */#define CMD_SCN_CLR		0x0F		/* Clear status change bits */#define CMD_IMR_SET		0x10		/* Set IMR register bits */#define CMD_TXI			0x11		/* Transmit Inhibit/Enable */#define CMD_TIM			0x12		/* Set TIM Listen algorithm (Beacon parm)*/#define CMD_IDL			0x13		/* Set Interrupt Delay */#define CMD_STST		0x14		/* Self Test */#define CMD_CLS			0x15		/* Clear Statistics */#define CMD_RTC			0x16		/* Read Real time Clock */#define CMD_PMG			0x18		/* Set power management mode */#define CMD_FLAGS		0x1A		/* Set adapter flags */#define CMD_ASR_SET		0x1B		/* Set ASR bits */#define CMD_FLASH		0x1C		/* Update adapter flash */#define CMD_ACL_ADD		0x1D		/* Add Access Control List entry */#define CMD_ACL_DEL		0x1E		/* Delete Access Control List entry */#define CMD_ACL_CLR		0x1F		/* Clear ACL */#define CMD_MAP_CONFIG	0x21		/* MAP Configuration */#define CMD_ESSID		0x27		/* set ESS_ID (4.0) */#define CMD_PREFER		0x28		/* set Preferred AP */#define CMD_MANDAT		0x29		/* set Mandatory AP */#define CMD_TX_RATE		0x2A		/* Set supported Tx Rates */#define CMD_MAC_ADRS	0x2B		/* Set MAC Address *///#define PMG_CAM			0			/* power mgmt mode *///#define PMG_PSP			1			/* power mgmt mode *//* *	Rx/Tx Configuration Register */#define RC_ENR			0x80		/* receive config: enb receiver (ADP) */#define RC_MAC			0x20		/* receive config: host receives mac packets */#define RC_PRO			0x10		/* receive config: promiscious mode (PRO) */#define RC_AMP			0x08		/* receive config: acc multicast pkts (AMP) */#define RC_ABP			0x04		/* receive config: acc broadcast pkts (ABP) */#define RC_DIV			0x01		/* receive config: disable antenna diversity */#define TC_ENT			0x80		/* transmit config: enb transmitter */#define TC_LOOP			0x01		/* transmit config: loop back *//* *	Adapter Status Register definitions */#define ASR_RXRDY		0x80		/* receive ready */#define ASR_RXERR		0x40		/* receive error */#define ASR_TXDN		0x20		/* transmit complete */#define ASR_STATCHG		0x10		/* status change */#define ASR_IDLE		0x04#define ASR_TXBUSY		0x02		/* tx handoff in process */#define ASR_TXBA		0x01		/* tx buffer available *//* *	Receive Status Register definitions */#define RSR_RXRDY		0x80		/* receive ready */#define RSR_RXERR		0x40		/* receive error */#define RSR_RXMULT		0x20		/* multicast flag */#define RSR_RXOVF		0x10		/* overflow error flag *//* *	Transmit Status Register definitions */#define TSR_TXGU		0x80		/* transmit give up (retry exceeded) */#define TSR_TXNOAP		0x40		/* no ap */#define TSR_TXOK		0x20		/* transmit completed ok */#define TSR_TXERR		0x10		// transmit error (hw)#define TSR_TXTRYS		0x0F		/* transmit retry field (4 bits) *//* *	Interrupt Mask Register definitions */#define IMR_RXRDY		0x80		/* correspond to ASR bits */#define IMR_RXERR		0x40#define IMR_TXDN		0x20#define IMR_TXERR		0x10/* *	Association Status Bits */#define AE_Associated	0x80		/* the MU is associated with an AP */#define AE_Unassociated	0x40		/* the MU is not associated */#define AE_AP_Table_Chg	0x02		/* AP table changed */#define AE_Reassociated	0x01		/* the MU has reassociated with an AP */								/* (cleared by Host after reading) *//* *	Structure Definitions							      *//* *	MAC Tx/Rx Buffer Workspace Definitions */typedef struct tagMAC_Buffer_Def {	Word wNext_Buffer_Link;					/* link to next buffer or 0 */	Word wBuffer_Length;					/* payload size of this buffer */	Word wData_Offset;						/* offset from link to payload */	Word wFrag_Info;	Word wTime_Stamp_MSW;	Byte byDest_Addr[S24_BSS_ID_LENGTH];	/* dest address if first buffer */	Byte bySource_Addr[S24_BSS_ID_LENGTH];	/* source address if first buffer */	Word wTime_Stamp_LSW;	Word wTotal_Length;	Word wBranch_Link;	Word wRSSI_Freq;						/* low byte is RSSI, high byte is freq */	Word wNot_Used;} MAC_Buffer_Def;/* *	Transmit Data Register structure */typedef struct tagTDR_RD_Def {	U16 TDR_Free_Buffer_Ptr;		/* pointer to free buffer */	U16 TDR_Data_Length;			/* Length of data */	U16 TDR_Data_Offset;			/* offset to user data area */	U16 TDR_Buffer_Size;			/* buffer size */} TDR_RD_Def;/* *	Receive Data Register structure */typedef struct tagRDR_RD_Def{	U16 RDR_Total_RX_Length;		/* total rx length */	U16 RDR_RX_Buffer_Ptr;			/* pointer to rx buffer */} RDR_RD_Def;typedef struct tagAdapterTx{	Word	wLen;	Byte 	byFlags;} AdapterTx;/* * Interrupt Delay Structure (for CMD_IDL) */typedef struct tagIDL{	Word	wIntDelay;				// Interrupt delay value	Word	wAdapterTimeout;		// Adapter timeout	Byte	byPowerMode;			// PSP = 1	Byte	byBeacon;				// Beacon param} IDLType;/* *	Define offsets to fields in linked list buffer */#define D_SIZE		(1 * sizeof( U16 ))#define D_OFFSET	(2 * sizeof( U16 ))#define D_ADDR		(5 * sizeof( U16 ))typedef enum{	pmCAM = 0,	pmPSP,	pmHOSTDOWN,	pmSLEEP,	pmVCCOFF} S24PowerMode;typedef enum{	pmStageInitial = 0,	pmStage1,	pmStage2} S24PowerStage;// S24PreferencesType is used by S24GetPreference() and S24SetPreference()typedef enum{	// ** Misc **	s24PrefRxOption = 0,		// Transmitter settings	s24PrefTxOptions,			// Receiver Settings	s24PrefAdapterFlags,		// Adapter Option Flag		// ** Adapter and BSS ID's **	s24PrefPreferredBSSId,		// Preferred BSS ID to use	s24PrefMandatoryBSSId,		// Mandatory BSS ID to use		// ** Power Modes **	s24PrefInitialPowerMode,	// As saved in preferences	s24PrefBeaconAlgorithm,		// Beacon algorithm	s24PrefBeaconMin,			// Minimum beacon listen value	s24PrefBeaconMax,			// Maximum beacon listen value		s24PrefPowerModeInitial,	// Active / initial power mode	s24PrefPowerModeStage1,		// Stage 1 power mode		s24PrefVCCOffTimeout,		// Time to VCC Off from NAP mode JeffI 04/05/99	// ** Network Specific Prefs **	// These are changeable in the S24 Preferences Panel	s24PrefESSID,				// ESS ID to use when associating 	s24PrefUseDHCP,				// Shall we use DHCP?		s24PrefEnableDNS,			// Enable DNS?	s24PrefStaticIP,			// Static IP of the S24 Device	s24PrefSubnetMask,			// Subnet mask for the S24 Device	s24PrefGateway,				// Gateway used by the S24 Device	s24PrefPrimaryDNS,			// Primary DNS used by the S24 Device	s24PrefSecondaryDNS,		// Secondary DNS used by the S24 Device	s24PrefHostName,			// Host name of the S24 device	s24PrefDomainName			// Domain name of the S24 device} S24PreferencesType;