; Built-ins
(define(car x)(car x))
(define(cdr x)(cdr x))
(define(caar x)(caar x))
(define(cadr x)(cadr x))
(define(cdar x)(cdar x))
(define(cddr x)(cddr x))
(define(caaar x)(caaar x))
(define(caadr x)(caadr x))
(define(cadar x)(cadar x))
(define(caddr x)(caddr x))
(define(cdaar x)(cdaar x))
(define(cdadr x)(cdadr x))
(define(cddar x)(cddar x))
(define(cdddr x)(cdddr x))
(define(gensym)(gensym))
(define(boolean? x)(boolean? x))
(define(null? x)(null? x))
(define(pair? x)(pair? x))
(define(number? x)(number? x))
(define(complex? x)(complex? x))
(define(real? x)(real? x))
(define(integer? x)(integer? x))
(define(char? x)(char? x))
(define(string? x)(string? x))
(define(symbol? x)(symbol? x))
(define(procedure? x)(procedure? x))
(define(continuation? x)(continuation? x))
(define(promise? x)(promise? x))
(define(none? x)(none? x))
(define(macro? x)(macro? x))
(define(input-port? x)(input-port? x))
(define(output-port? x)(output-port? x))
(define(eof-object? x)(eof-object? x))
(define(not x)(not x))
(define(call/cc x)(call/cc x))
(define(force x)(force x))
(define(display x.r)(if(null? r)(display x)(display x(car r))))
(define(write x.r) (if(null? r)(write x)(write x(car r))))
(define(open-input-file f)(open-input-file f))
(define(open-output-file f)(open-output-file f))
(define(open-append-file f)(open-append-file f))
(define(read p)(read p))
(define(read-char p)(read-char p))
(define(peek-char p)(peek-char p))
(define(read-line p)(read-line p))
(define(dir.r)(if(null? r)(dir)(dir(car r))))
(define(delete-file x)(delete-file x))
(define(draw x y)(draw x y))
(define(rect x y r)(rect x y r))
(define(text o)(text o))
(define(string->list s)(string->list s))
(define(list->string s)(list->string s))
(define(string-length s)(string-length s))
(define(string-ref s k)(string-ref s k))
(define(string-set! s k c)(string-set! s k c))
(define(string-append.r)(if(null? r)""(string-append(car r)(apply string-append(cdr r)))))
(define(string=? s1 s2)(string=? s1 s2))
(define(substring s n k)(substring s n k))
(define(char->integer c)(char->integer c))
(define(integer->char n)(integer->char n))
(define(object->string n)(object->string n))
(define(string->object n)(string->object n))
(define(vector? o)(vector? o))
(define(make-vector n o)(make-vector n o))
(define(vector-length v)(vector-length v))
(define(vector-ref v n)(vector-ref v n))
(define(vector-set! v n o)(vector-set! v n o))
(define(vector.ol)(list->vector ol))
(define(vector->list v)(vector->list v))
(define(list->vector l)(list->vector l))
(define(+ .r)(if(null? r)0(+(car r)(apply +(cdr r)))))
(define(- x.r)(if(null? r)(- x)(- x(car r))))
(define(*.r)(if(null? r)1(*(car r)(apply *(cdr r)))))
(define(/ x.r)(if(null? r)(/ x)(/ x(car r))))
(define(quotient x y)(quotient x y))
(define(remainder x y)(remainder x y))
(define(random n)(random n))
(define(sin x)(sin x))
(define(cos x)(cos x))
(define(tan x)(tan x))
(define(sinh x)(sinh x))
(define(cosh x)(cosh x))
(define(tanh x)(tanh x))
(define(asin x)(asin x))
(define(acos x)(acos x))
(define(atan x.r)(if(null? r)(atan x)(atan x(car r))))
(define(asinh x)(asinh x))
(define(acosh x)(acosh x))
(define(atanh x)(atanh x))
(define(exp x)(exp x))
(define(log x)(log x))
(define(sqrt x)(sqrt x))
(define(floor x)(floor x))
(define(ceiling x)(ceiling x))
(define(truncate x)(truncate x))
(define(round x)(round x))
(define(integer x)(integer x))
(define(make-rectangular x y)(make-rectangular x y))
(define(make-polar x y)(make-polar x y))
(define(real-part x)(real-part x))
(define(imag-part x)(imag-part x))
(define(magnitude x)(magnitude x))
(define(angle x)(angle x))
(define(cons x y)(cons x y))
(define(append.r)(if(null? r)'()(append(car r)(apply append(cdr r)))))
(define(< x y)(< x y))
(define(<= x y)(<= x y))
(define(> x y)(> x y))
(define(>= x y)(>= x y))
(define(eq? x y)(eq? x y))
(define(eqv? x y)(eqv? x y))
(define(list.x)x)
(define(apply f a)(apply f a))
(define(sound f t)(sound f t))
(define(wait t)(wait t))
(define(disasm p)(disasm p))
(define(date-time)(date-time))
(define(read-record db n)(read-record db n))

